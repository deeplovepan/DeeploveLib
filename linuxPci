linux PCI

(1) define matched device
ex:
    static struct pci_device_id deviceIds[] = {
        { PCI_DEVICE(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_82810_IG1) }, 
        { PCI_DEVICE(PCI_VENDOR_ID_INTEL, PCI_DEVICE_ID_INTEL_82810_IG3) }, 
        {0,},
    };
    MODULE_DEVICE_TABLE(pci, deviceIds);

(2) define struct pci_driver
ex:
    static struct pci_driver pci_driver = {
        .name = "pci_skel",
        .id_table = ids,
        .probe = probe,
        .remove = remove,
    };
    probe:
        If the PCI driver claims the struct pci_dev that is passed to it, it
        should initialize the device properly and return 0.
        call pci_enable_device to enables the device

(3) register pci_driver in init function
ex:
    static int __init test_init(void) {
        return pci_register_driver(&pci_driver);
    }

(4) read / write configuration space
    int pci_read_config_byte(struct pci_dev *dev, int where, u8 *val);
    int pci_read_config_word(struct pci_dev *dev, int where, u16 *val);
    int pci_read_config_dword(struct pci_dev *dev, int where, u32 *val);
    int pci_write_config_byte(struct pci_dev *dev, int where, u8 val);
    int pci_write_config_word(struct pci_dev *dev, int where, u16 val);
    int pci_write_config_dword(struct pci_dev *dev, int where, u32 val);
ex:
    #include <linux/pci.h>
    u8 revision;
    pci_read_config_byte(dev, PCI_REVISION_ID, &revision);


(5) access I/O & memory space
    1. unsigned long pci_resource_start(struct pci_dev *dev, int bar);
       returns the first address (memory address or I/O port number) associated 
       with one of the six PCI I/O regions. ( bar is from 0 to 5)
    2. unsigned long pci_resource_end(struct pci_dev *dev, int bar);
       unsigned long pci_resource_flags(struct pci_dev *dev, int bar);








