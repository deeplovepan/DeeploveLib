shared memory
c and c++

command:
ipcs:
show ipc info (including shared memory info)
 
ipcrm -m 3333
remove share memory with id 3333
 
reference: 
http://www.cs.cf.ac.uk/Dave/C/node27.html
 
note:
after create share memory, it will keep even program exist
 
ex:
 
shm_server.c
 
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <stdio.h>
main()
{
char c;
int shmid;
key_t key;
char *shm, *s;
    size_t size = 1000;
/*
* We'll name our shared memory segment
* "5678".
*/
key = 5678;
/*
* Create the segment.
*/
if ((shmid = shmget(key, size, IPC_CREAT | 0666)) < 0) {
perror("shmget");
exit(1);
}
/*
* Now we attach the segment to our data space.
*/
if ((shm = shmat(shmid, NULL, 0)) == (char *) -1) {
perror("shmat");
exit(1);
}
/*
* Now put some things into the memory for the
* other process to read.
*/
s = shm;
for (c = 'a'; c <= 'z'; c++)
*s++ = c;
*s = NULL;
/*
* Finally, we wait until the other process 
* changes the first character of our memory
* to '*', indicating that it has read what 
* we put there.
*/
while (*shm != '*')
sleep(1);
exit(0);
}
 
shm_client.c
/*
 *  shareMemClient.c
 *  IftScsiTest
 *
 *  Created by deeplove on 4/6/10.
 *  Copyright 2010 __MyCompanyName__. All rights reserved.
 *
 */
 
 
/*
 * shm-client - client program to demonstrate shared memory.
 */
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <stdio.h>
 
 
main()
{
    int shmid;
    key_t key;
    char *shm, *s;
size_t shareMemSize = 1000;
 
    /*
     * We need to get the segment named
     * "5678", created by the server.
     */
    key = 5678;
 
    /*
     * Locate the segment.
     */
    if ((shmid = shmget(key, shareMemSize, 0666)) < 0) {
        perror("shmget");
        exit(1);
    }
 
    /*
     * Now we attach the segment to our data space.
     */
    if ((shm = shmat(shmid, NULL, 0)) == (char *) -1) {
        perror("shmat");
        exit(1);
    }
 
    /*
     * Now read what the server put in the memory.
     */
    for (s = shm; *s != NULL; s++)
        putchar(*s);
    putchar('\n');
 
    /*
     * Finally, change the first character of the 
     * segment to '*', indicating we have read 
     * the segment.
     */
    *shm = '*';
 
    exit(0);
}